# coding=utf-8
"""Helper utilities"""

from importlib import import_module

import numpy as np


def import_from(module, name):
    return getattr(import_module(module), name)


def is_nan_or_inf(x):
    """Is NaN or Inf"""
    return np.isnan(x) or np.isinf(x)


def flatten(pydict):
    """Flatten a dictionary

    Flatten a dictionary by generating a new dictionary containing all
    the keys from nested dictionaries. These keys are generated by
    concatenating the keys at different levels with the dot '.'
    character as the separator.

    """
    from copy import deepcopy
    pydict = deepcopy(pydict)
    if not isinstance(pydict, dict):
        raise ValueError('Only dictionaries are supported: {}'
                         .format(type(pydict)))
    children = {}
    for key, val in pydict.items():
        if isinstance(val, dict):
            children[key] = flatten(pydict[key])
    for key, value in children.items():
        pydict.update([('.'.join([key, k]), v) for k, v in value.items()])
        del pydict[key]
    return pydict


def get_properties(obj, props):
    """Retrieve a sequence of properties from an object

    """
    return [getattr(obj, p) for p in props]


def get_property(objs, prop):
    """Retrieve a property from a sequence of objects

    """
    return [getattr(o, prop) for o in objs]


def sanitise(string):
    """Sanitise string for use as group/directory name"""
    import re
    return '_'.join(re.findall(re.compile('[^ &()-]+'), string))


def str2datetime(timestamp):
    """Convert timestamp strings to time tuples"""
    from datetime import datetime
    return datetime.strptime(timestamp.split('.')[0], '%Y-%m-%dT%H:%M:%S')


def fullpath(_ls):
    """Decorator for ls implementations.

    Some ls implementations list the files/folders in a directory,
    whereas some list the full path.  This converts the former to full
    path output (e.g. use with os.listdir).

    """
    from functools import wraps

    @wraps(_ls)
    def _ls_fullpath(path):
        return ['{}/{}'.format(path, f) for f in _ls(path)]
    return _ls_fullpath


def suppress_warnings():
    """Suppress a few well understood warnings from Pandas and Numpy.

    Warning from pandas about skipping directories, and using imp
    instead of importlib.

    """
    from numpy import VisibleDeprecationWarning
    from warnings import filterwarnings
    filterwarnings(action='ignore', category=ImportWarning,
                   message='Not importing directory.*')
    filterwarnings(action='ignore', category=ResourceWarning,
                   message='unclosed file.*')
    filterwarnings(action='ignore', category=PendingDeprecationWarning,
                   message='the imp module is deprecated.*')
    filterwarnings(action='ignore', category=VisibleDeprecationWarning,
                   message='using a non-integer number.*')
    filterwarnings(action='ignore', category=DeprecationWarning,
                   message='.*inspect.getargspec() is deprecated.*')


def resource_summary(prefix="", raw=False):
    """Get memory usage"""
    import resource
    usage = resource.getrusage(resource.RUSAGE_SELF)
    if raw:
        return (usage[0], usage[1],
                (usage[2]*resource.getpagesize())/1000000.0)
    else:
        print('{}: usertime={} systime={} mem={} mb'.format(
            prefix, usage[0], usage[1],
            (usage[2]*resource.getpagesize())/1000000.0))
